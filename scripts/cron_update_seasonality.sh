#!/bin/bash
# Cron-friendly wrapper that rebuilds hour-of-week seasonality multipliers and
# commits them if the update is significant. Designed to be executed from cron.

set -euo pipefail

# Resolve repository root relative to this script
REPO_DIR="$(cd "$(dirname "$0")/.." && pwd)"
cd "$REPO_DIR"

# Location of the JSON generated by the builder script
JSON_PATH="data/latency/liquidity_latency_seasonality.json"

# Allow overriding comparison threshold via env var
# Small changes below this value are ignored.
THRESHOLD="${SEASONALITY_THRESHOLD:-0.01}"
# Any change above this maximum triggers a hard failure for manual review.
MAX_DELTA="${SEASONALITY_MAX_DELTA:-0.5}"

python scripts/build_hourly_seasonality.py --out "$JSON_PATH"

# If nothing changed, exit early
if git diff --quiet "$JSON_PATH"; then
  echo "No changes detected in $JSON_PATH"
  exit 0
fi

# Compare new multipliers with previous committed version
python - <<PY
import json, subprocess, sys, os
import numpy as np
path = "$JSON_PATH"
# Load newly generated multipliers
with open(path) as f:
    new = json.load(f)
# Load previous version from git, if available
cp = subprocess.run(["git", "show", f"HEAD:{JSON_PATH}"], capture_output=True, text=True)
if cp.returncode != 0:
    sys.exit(0)  # No previous file, treat as fresh commit
old = json.loads(cp.stdout)
keys = set(new) | set(old)
max_diff = 0.0
for k in keys:
    n = np.array(new.get(k, []), dtype=float)
    o = np.array(old.get(k, []), dtype=float)
    if n.shape != o.shape:
        diff = 1.0  # force commit on shape change
    else:
        diff = float(np.max(np.abs(n - o)))
    max_diff = max(max_diff, diff)
print(f"Max absolute difference: {max_diff}")
threshold = float(os.environ.get("SEASONALITY_THRESHOLD", "0.01"))
max_delta = float(os.environ.get("SEASONALITY_MAX_DELTA", "0.5"))
if max_diff < threshold:
    print(f"Change below threshold {threshold}; skipping commit")
    sys.exit(1)
if max_diff > max_delta:
    print(f"Change {max_diff} exceeds sanity limit {max_delta}; aborting")
    sys.exit(2)
PY
status=$?
if [[ $status -eq 1 ]]; then
  # Revert file and exit silently
  git checkout -- "$JSON_PATH"
  exit 0
elif [[ $status -eq 2 ]]; then
  echo "Sanity check failed; leaving new file for inspection"
  exit 1
fi

git add "$JSON_PATH"
git commit -m "chore: update seasonality multipliers" && git push
