mode: train
run_id: default-run
logs_dir: logs
artifacts_dir: artifacts
seasonality_log_level: INFO
execution_profile: MKT_OPEN_NEXT_H1
execution_params:
  limit_offset_bps: 0.0
  ttl_steps: 0
  tif: GTC
execution:
  enabled: true              # оффлайн-тренировка симулирует сделки ради реварда
  mode: bar
execution_config:
  notional_threshold: 10000.0
  large_order_algo: TWAP
  pov:
    participation: 0.10
    child_interval_s: 60
    min_child_notional: 20.0

# Optional path to 168 hourly liquidity multipliers (indexed by UTC hour-of-week;
# values clamped to [0.1, 10.0])
liquidity_seasonality_path: "data/latency/liquidity_latency_seasonality.json"
# Optional SHA256 hash of the above liquidity multipliers for integrity checking
liquidity_seasonality_hash: null
# Optional path to 168 hourly liquidity overrides multiplied with the above multipliers
liquidity_seasonality_override_path: null
# Optional path to 168 hourly latency multipliers (indexed by UTC hour-of-week;
# values clamped to [0.1, 10.0])
latency_seasonality_path: "data/latency/liquidity_latency_seasonality.json"
# Set false to ignore liquidity and latency multipliers
use_seasonality: false

market: spot

data:
  timeframe: "1m"  # symbols are loaded from data/universe/symbols.json
  # Training window (train_start_ts/train_end_ts); legacy aliases start_ts/end_ts remain supported.
  train_start_ts: 1499990400     # 2017-07-14T00:00:00Z (aka start_ts)
  train_end_ts: 1743465599       # 2025-03-31T23:59:59Z (aka end_ts)
  # start_ts: 1499990400         # Uncomment for legacy-style configs (kept for compatibility)
  # end_ts: 1743465599           # Uncomment for legacy-style configs (kept for compatibility)
  val_start_ts: 1743465600       # 2025-04-01T00:00:00Z
  val_end_ts: 1751327999         # 2025-06-30T23:59:59Z
  test_start_ts: 1751328000      # 2025-07-01T00:00:00Z
  test_end_ts: 1759276799        # 2025-09-30T23:59:59Z

model:
  algo: "ppo"
  params:
    learning_rate: 3.0e-4              # ближе к рабочему дефолту PPO
    gamma: 0.99
    gae_lambda: 0.95
    clip_range: 0.10                   # не душим обновления (0.1–0.2 норма)
    ent_coef: 0.001                    # дайте политике «подышать»
    ent_coef_final: 0.0002
    ent_coef_decay_steps: 400          # плавнее убывание (≈ первые 30% апдейтов)
    ent_coef_plateau_window: 24
    ent_coef_plateau_tolerance: 0.002
    ent_coef_plateau_min_updates: 40
    vf_coef: 0.5
    # Явно отключаем «raw» лимит ценности (чтобы политика не подставляла ±max(|v_min|,|v_max|)):
    value_clip_limit: null
    vf_coef_warmup: 0
    vf_coef_warmup_updates: 0
    vf_bad_explained_scale: 1.0
    vf_bad_explained_floor: 0.0
    bad_explained_patience: 2
    max_grad_norm: 0.5
    n_steps: 2048                      # больше контекста/стабильнее Â
    n_epochs: 4                        # разумный компромисс вместо 1
    batch_size: 64                     # типичный минибатч для PPO
    microbatch_size: 64
    seed: 20240518
    target_kl: 0.02                    # агрессивно контролируем дивергенцию
    kl_early_stop: true
    kl_exceed_stop_fraction: 0.25      # стопим эпоху, если ≥25% батчей вышли за target_kl
    kl_lr_decay: 1.0                   # не душить LR «за KL»
    kl_epoch_decay: 1.0
    kl_lr_scale_min: 0.10              # даже если включится — не в ноль
    trade_frequency_penalty: 0.0
    turnover_penalty_coef: 0.0005      # ≈ комиссия 5 bps в долях
    cql_alpha: 0.0
    cql_beta: 5.0
    cvar_alpha: 0.05
    cvar_weight: 0.0
    cvar_activation_threshold: 0.0
    cvar_activation_hysteresis: 0.05
    cvar_ramp_updates: 0
    cvar_cap: 0.5
    use_torch_compile: false
    bc_warmup_steps: 200000
    bc_decay_steps: 800000
    bc_final_coef: 0.0

    # Параметры головы ценности:
    num_atoms: 21   # можно 1 (обычная ценность), 11 — компромисс; >51 обычно не нужно
    v_min: -0.2     # нижняя граница поддержки ценности
    v_max: 0.2      # верхняя граница (v_max > v_min)
    v_range_ema_alpha: 0.005
    clip_range_warmup: 0.18
    clip_range_warmup_updates: 16
    critic_grad_warmup_updates: 0
    entropy_boost_factor: 1.5

env:
  decision_timing: CLOSE_TO_OPEN
  no_trade:
    enabled: false         # полностью отключаем блокировки на трейне
    policy: ignore
  session:
    calendar: crypto_24x7
    pre_open_keepout_bars: 0
    post_close_keepout_bars: 0
  liquidity:
    min_adv_usd: 0
    min_bar_quote_volume: 0
  spreads:
    max_spread_bps: 1000000000
  warmup:
    bars: 0

optimization:
  scheduler:
    enabled: false

algo:
  actions:
    long_only: true            # <-- ВКЛЮЧАЕМ лонг-онли из конфига
  action_wrapper:
    fixed_type: MARKET         # фиксируем тип действия
    lock_price_offset: true
    fixed_price_offset_ticks: 0
    lock_ttl: true
    fixed_ttl_steps: 0
    bins_vol: 6            # более «тонкие» объёмы → не вечный HOLD и не «all-in»

loss_masks:
  include_heads:
    type: false
    price_offset_ticks: false
    ttl_steps: false
    volume_frac: true

quantizer:
  filters_path: "data/binance_filters.json"
  # strict_filters=true → строго придерживаться актуальных фильтров; false включает мягкий фолбек к кешу/легаси-логике.
  # Поле strict остаётся легаси-алиасом для strict_filters и может опускаться в новых конфигурациях.
  strict_filters: true
  enforce_percent_price_by_side: true
  auto_refresh_days: 30
  refresh_on_start: false

fees:
  path: "data/fees/fees_by_symbol.json"
  use_bnb_discount: false
  maker_bps: 1.0
  taker_bps: 10.0
  half_spread_bps: 5.0
  impact_coeff: 0.0
  rounding:
    enabled: true
    mode: up

slippage:
  k: 0.8
  min_half_spread_bps: 0.0
  default_spread_bps: 2.0
  eps: 1e-12
  dynamic:
    enabled: false           # Отключено → модель использует статический спред (легаси-поведение).
    alpha_bps: 0.0           # Аддитивная надбавка к базовому спреду (в bps) при активном динамическом режиме.
    beta_coef: 0.0           # Коэффициент при волатильности/ликвидности; 0.0 отключает масштабирование.
    min_spread_bps: 0.0      # Нижняя граница рассчитанного динамического спреда.
    max_spread_bps: 20.0     # Верхняя граница рассчитанного динамического спреда.
    smoothing_alpha: null    # Опциональная EMA-сглаживание [0,1]; null оставляет спред без сглаживания.
    vol_metric: null         # Имя метрики волатильности (например, "sigma") для beta_coef; null = по умолчанию.
    vol_window: null         # Окно (в барах) для vol_metric; null = используем источник данных.
    fallback_spread_bps: null  # Фолбек-спред (bps), когда нет данных; null → используем default_spread_bps.
    refresh_warn_days: null  # Предупреждать, если профиль сезонности устарел; null → без проверки.
    refresh_fail_days: null  # Прерывать выполнение при сильно устаревшем профиле; null → без проверки.
    refresh_on_start: false  # Принудительно обновлять профиль при старте (если поддерживается).
    profile_kind: hourly
    multipliers: []          # 168 нормированных коэффициентов (например, со средним 1.0)
    path: null               # Опционально: путь к JSON-профилю (см. data/slippage/hourly_profile.sample.json)
    override_path: null      # Опциональный путь к локальным поправкам поверх базового профиля.
    hash: null               # Опциональный SHA256 от базового профиля для контроля целостности.
    use_volatility: false    # Легаси-переключатель; оставьте false, если используете beta_coef.
    gamma: 0.0
    zscore_clip: null        # Z-score клип при нормализации волатильности; null → без клипа.
    last_refresh_ts: null    # Последняя отметка обновления профиля (мс); заполняется автообновлением.
  dynamic_impact:
    enabled: false           # Включить масштабирование коэффициента impact (k) по рыночным условиям.
    beta_vol: 0.0            # Линейный коэффициент на нормализованную волатильность; 0.0 = отключено.
    beta_participation: 0.0  # Линейный коэффициент на нормализованную долю участия/размер ордера.
    min_k: null              # Нижняя граница для результирующего k (null = без ограничений).
    max_k: null              # Верхняя граница для результирующего k (null = без ограничений).
    fallback_k: null         # Опциональный k, используемый, если входные метрики недоступны.
    vol_metric: null         # Имя метрики волатильности для beta_vol.
    vol_window: null         # Окно (в барах) для метрики волатильности.
    participation_metric: null   # Источник participation (например, "participation").
    participation_window: null   # Окно (в барах) для participation_metric.
    smoothing_alpha: null    # EMA-сглаживание результирующего k [0,1]; null = без сглаживания.
    zscore_clip: null        # Клип z-score при нормализации метрик; null = без клипа.
  tail_shock:
    enabled: false           # Включить редкие «хвостовые» шоки спреда/слиппеджа.
    probability: 0.0         # Вероятность шока на шаг (0..1).
    shock_bps: 0.0           # Дополнительный фиксированный шок в bps при срабатывании.
    shock_multiplier: 1.0    # Мультипликатор к рассчитанному слиппеджу при шоке.
    decay_halflife_bars: null  # Полупериод затухания эффекта шока (в барах); null = без затухания.
    min_multiplier: null     # Нижняя граница итогового мультипликатора.
    max_multiplier: null     # Верхняя граница итогового мультипликатора.
    seed: null               # Опциональный seed для генератора шоков.
  adv:
    enabled: false           # Включить динамику ликвидности на основе ADV/оборотной статистики.
    window_days: 30          # Горизонт окна (в днях) для расчёта ADV.
    smoothing_alpha: null    # EMA-сглаживание ADV [0,1]; null = без сглаживания.
    fallback_adv: null       # Опциональный ADV по умолчанию при отсутствии данных.
    min_adv: null            # Нижняя граница ADV (в базовой валюте).
    max_adv: null            # Верхняя граница ADV (в базовой валюте).
    seasonality_path: null   # Путь к сезонному профилю ликвидности (JSON/YAML) или null.
    override_path: null      # Путь к локальному override-сезонности или null.
    hash: null               # Контрольная сумма сезонного профиля (опционально).
    profile_kind: null       # Имя профиля в файле сезонности (например, "hourly").
    multipliers: []          # Inline-мультипликаторы сезонности (по умолчанию пусто).
    zscore_clip: null        # Клип при нормализации ADV (z-score); null = без клипа.
    liquidity_buffer: 1.0    # Доп. буфер ликвидности (>1 увеличивает оценку доступного ADV).

latency:
  use_seasonality: false
  base_ms: 0
  jitter_ms: 0
  latency_seasonality_path: null
  refresh_period_days: 30
  seasonality_default: 1.0
  spike_p: 0.01
  spike_mult: 5.0
  timeout_ms: 2500
  retries: 1
  seed: 0  # RNG seed; seasonality multipliers do not affect RNG state

risk:
  enabled: false

no_trade:
  enabled: false
  cooldown_bars: 0
  block_when_low_liquidity: false

liquidity:
  adv_min_share: 0.0

costs:
  taker_bps: 10
  half_spread_bps: 5
  impact_coeff: 0.0

reward:
  use_portfolio_pnl: true
  turnover_penalty_coef: 0.0005

components:
  market_data:
    target: impl_offline_data:OfflineCSVBarSource
    params:
      paths: ["data/train/*.csv"]
      timeframe: "1m"
  executor:
    target: impl_sim_executor:SimExecutor
    params:
      symbol: "BTCUSDT"
  feature_pipe:
    target: feature_pipe:FeaturePipe
    params: {}
  policy:
    target: strategies.momentum:MomentumStrategy
    params: {}
  risk_guards:
    target: impl_risk_basic:RiskBasicImpl
    params: {}
  backtest_engine:
    target: service_backtest:ServiceBacktest
    params: {}
